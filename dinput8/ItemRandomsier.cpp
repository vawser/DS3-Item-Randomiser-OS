#include "Core.h"

extern CCore* Core;
extern CItemRandomiser *ItemRandomiser;
extern SCore* CoreStruct;
DWORD pGoods[279];
DWORD pAmmunition[33];
DWORD pKeyGoods[66];
DWORD pLimitedGoods[204];
DWORD pNGRings[134];
DWORD pUninfusableWeapons[64];
DWORD pShields[81];
DWORD pNormalWeapons[185];
DWORD pUniqueWeapons[282];

char pBuffer[MAX_PATH];

VOID fItemRandomiser(UINT_PTR qWorldChrMan, UINT_PTR pItemBuffer, UINT_PTR pItemData, DWORD64 qReturnAddress) {

	if (*(int*)(pItemData) >= 0) ItemRandomiser->RandomiseItem(qWorldChrMan, pItemBuffer, pItemData, qReturnAddress);

	return;
};

VOID CItemRandomiser::RandomiseItem(UINT_PTR qWorldChrMan, UINT_PTR pItemBuffer, UINT_PTR pItemData, DWORD64 qReturnAddress) {

	DWORD dItemAmount = 0;
	DWORD dItemID = 0;
	DWORD dItemQuantity = 0;
	DWORD dItemDurability = 0;
	DWORD dOffsetMax = 0;
	DWORD* pOffsetArray;

	dItemAmount = *(int*)pItemBuffer;
	pItemBuffer += 4;

	if (dItemAmount > 6) {
		Core->Panic("Too many items!", "...\\Source\\ItemRandomiser\\ItemRandomiser.cpp", FE_AmountTooHigh, 1);
		int3
	};

	while (dItemAmount) {
	
		dItemID = *(int*)(pItemBuffer);
		dItemQuantity = *(int*)(pItemBuffer + 0x04);
		dItemDurability = *(int*)(pItemBuffer + 0x08);
		pOffsetArray = CoreStruct->pOffsetArray;

		dOffsetMax = *pOffsetArray;
		pOffsetArray++;

		if (!CoreStruct->dRandomiseKeyItems) { 
			if (IsGameProgressionItem(dItemID)) return;
		};
		if (!CoreStruct->dAllowPlusRings) { 
			if (IsPlusRing(dItemID)) return;
		};
		if (!CoreStruct->dRandomEstusMaterial) { 
			if ((dItemID == ITEM_ESTUS_SHARD)) return;
			if ((dItemID == ITEM_UNDEAD_BONE_SHARD)) return;
		};

		if (CoreStruct->pItemArray[0] < dOffsetMax) {
			dItemID = CoreStruct->pItemArray[pOffsetArray[CoreStruct->pItemArray[0]]];
			pOffsetArray[CoreStruct->pItemArray[0]] = 0;
		}
		else {
			dItemID = CoreStruct->pItemArray[RandomiseNumber(1, dOffsetMax)];
		};

		CoreStruct->pItemArray[0]++;

		SortNewItem(&dItemID, &dItemQuantity);

		if ((dItemID == ITEM_ESTUS_SHARD) || (dItemID == ITEM_UNDEAD_BONE_SHARD)) {
			if (!CoreStruct->dRandomEstusMaterial) {
				if (CoreStruct->dShowDebugPrint) {
					sprintf_s(pBuffer, "[Debug] - Randomise Estus Mat\n");
					printf_s(pBuffer);
				}
				dItemID = pGoods[RandomiseNumber(0, sizeof(pGoods))];
			}
		};
		if (!CoreStruct->dRandomiseKeyItems) {
			if (IsGameProgressionItem(dItemID)) {
				if (CoreStruct->dShowDebugPrint) {
					sprintf_s(pBuffer, "[Debug] - Randomise Key Item\n");
					printf_s(pBuffer);
				}
				dItemID = pGoods[RandomiseNumber(0, sizeof(pGoods))];
			}
		};
		if (!CoreStruct->dAllowPlusRings) {
			if (IsPlusRing(dItemID)) {
				if (CoreStruct->dShowDebugPrint) {
					sprintf_s(pBuffer, "[Debug] - Randomise Plus Ring\n");
					printf_s(pBuffer);
				}
				dItemID = pGoods[RandomiseNumber(0, sizeof(pGoods))];
			}
		};

		DebugItemPrint(*(int*)(pItemBuffer), *(int*)(pItemBuffer + 0x04), dItemID, dItemQuantity);
		
		*(int*)(pItemBuffer) = dItemID;
		*(int*)(pItemBuffer + 0x04) = dItemQuantity;
		*(int*)(pItemBuffer + 0x08) = -1;
	
		dItemAmount--;
		pItemBuffer += 0x0C;
	};

	CoreStruct->dIsListChanged++;

	return;

};

VOID CItemRandomiser::SortNewItem(DWORD* dItem, DWORD* dQuantity) {

	char pBuffer[MAX_PATH];
	UINT_PTR pPlayerPointer = 0;
	DWORD dItemType = 0;
	DWORD dItemSortID = 0;
	BYTE bPlayerUpgradeLevel = 0;
	
	if (!*dItem) {
		Core->Panic("No item", "...\\Source\\ItemRandomiser\\ItemRandomiser.cpp", HE_InvalidItemType, 0);
		*dItem = pGoods[RandomiseNumber(0, sizeof(pGoods))];
		*dQuantity = 1;
		return;
	};

	dItemType = (*dItem >> 0x1C);
	dItemSortID = (*dItem & 0x0FFFFFF);

	switch (dItemType) {
	
	case(ItemType_Weapon): {

		*dQuantity = 1;
		
		if ((*dItem >> 0x10) == 6) {
			*dQuantity = RandomiseNumber(1, 99);
			return;
		};

		pPlayerPointer = *(UINT_PTR*)(CoreStruct->qLocalPlayer);
		pPlayerPointer = *(UINT_PTR*)(pPlayerPointer + 0x10);
		bPlayerUpgradeLevel = *(BYTE*)(pPlayerPointer + 0xB3); // Get current upgrade level

		if (!bPlayerUpgradeLevel) return;

		// Handle uninfusables separately
		if (IsUninfusableWeapon(*dItem)) {
			// Weapons
			if (!IsShield(*dItem)) {
				if (bPlayerUpgradeLevel < 5) {
					*dItem += RandomiseNumber(0, bPlayerUpgradeLevel); // Reinforcement
				}
				else {
					*dItem += bPlayerUpgradeLevel; // Reinforcement
				}
			}
			// Shields
			else {
				if (bPlayerUpgradeLevel < 5) {
					*dItem += RandomiseNumber(0, bPlayerUpgradeLevel); // Reinforcement
				}
				else {
					*dItem += bPlayerUpgradeLevel; // Reinforcement
				}
			}
		}
		else {
			// Weapons
			if (!IsShield(*dItem)) {
				if (bPlayerUpgradeLevel < 5) {
					*dItem += RandomiseNumber(0, bPlayerUpgradeLevel); // Reinforcement
					*dItem += (RandomiseNumber(0, 14) * 100); // Infusion
				}
				else {
					*dItem += bPlayerUpgradeLevel; // Reinforcement
					*dItem += (RandomiseNumber(0, 14) * 100); // Infusion
				}
			}
			// Shields
			else {
				if (bPlayerUpgradeLevel < 5) {
					*dItem += RandomiseNumber(0, bPlayerUpgradeLevel); // Reinforcement
					*dItem += (RandomiseNumber(0, 10) * 100); // Infusion
				}
				else {
					*dItem += bPlayerUpgradeLevel; // Reinforcement
					*dItem += (RandomiseNumber(0, 10) * 100); // Infusion
				}
			}
		}
		return;
	
	};
	case(ItemType_Protector): {
		*dQuantity = 1;
		return;
	};
	case(ItemType_Accessory): {
		*dQuantity = 1;
		return;
	};
	case(ItemType_Goods): {
		*dQuantity = 1;

		// Limit restricted items to 1
		if (IsRestrictedGoods(*dItem)) return;

		// Otherwise randomise quantity
		*dQuantity = RandomiseNumber(1, 10);
		return;
	};
	default: {
		sprintf_s(pBuffer, "Invalid item type: %i (%08X)", dItemType, *dItem);
		Core->Panic(pBuffer, "...\\Source\\ItemRandomiser\\ItemRandomiser.cpp", HE_InvalidItemType, 0);
		*dItem = ITEM_EMBER;
		*dQuantity = 1;
	};
	
	};

};

BOOL CItemRandomiser::IsGameProgressionItem(DWORD dItemID) {

	int i = 0;

	while (pKeyGoods[i]) {
		if (dItemID == pKeyGoods[i]) return true;
		i++;
	};

	return false;
};

BOOL CItemRandomiser::IsRestrictedGoods(DWORD dItemID) {

	int i = 0;

	while (pLimitedGoods[i]) {
		if (dItemID == pLimitedGoods[i]) return true;
		i++;
	};

	return false;
};

BOOL CItemRandomiser::IsPlusRing(DWORD dItemID) {

	int i = 0;

	while (pNGRings[i]) {
		if (dItemID == pNGRings[i]) return true;
		i++;
	};

	return false;
};

BOOL CItemRandomiser::IsUninfusableWeapon(DWORD dItemID) {

	int i = 0;

	while (pUninfusableWeapons[i]) {
		if (dItemID == pUninfusableWeapons[i]) return true;
		i++;
	};

	return false;
};

BOOL CItemRandomiser::IsShield(DWORD dItemID) {

	int i = 0;

	while (pShields[i]) {
		if (dItemID == pShields[i]) return true;
		i++;
	};

	return false;
};

DWORD CItemRandomiser::RandomiseNumber(DWORD dMin, DWORD dMax) {

	char pBuffer[MAX_PATH];
	DWORD dGen = 0;

	if (dMin > dMax) {
		sprintf_s(pBuffer, "Defined minimum > maximum! %i > %i", dMin, dMax);
		Core->Panic(pBuffer, "...\\Source\\ItemRandomiser\\ItemRandomiser.cpp", HE_Undefined, 0);
		return 1;
	};

	dGen = (DWORD)(__rdtsc() % dMax);

	if ((!dMin) || (dGen > dMin)) return dGen;

	return dMin;
};

VOID CItemRandomiser::DebugItemPrint(DWORD dOldItem, DWORD dOldQuantity, DWORD dItem, DWORD dQuantity) {
#ifdef DEBUG
	char pBuffer[MAX_PATH];
	sprintf_s(pBuffer, "[%i] Item randomised | Old %08X (%i) | New %08X (%i)\n", CoreStruct->pItemArray[0], dOldItem, dOldQuantity, dItem, dQuantity);
	printf_s(pBuffer);
#endif
};

extern DWORD pGoods[279] = {
	0x40000064,
	0x40000065,
	0x40000066,
	0x40000067,
	0x4000006C,
	0x4000006F,
	0x40000073,
	0x40000075,
	0x40000077,
	0x400000F0,
	0x400000F1,
	0x400000F2,
	0x40000104,
	0x40000105,
	0x40000106,
	0x4000010E,
	0x4000010F,
	0x40000110,
	0x40000112,
	0x40000113,
	0x40000114,
	0x40000115,
	0x40000118,
	0x40000122,
	0x40000124,
	0x40000125,
	0x40000126,
	0x40000128,
	0x40000129,
	0x4000012B,
	0x4000012C,
	0x4000012D,
	0x4000012E,
	0x4000012F,
	0x40000130,
	0x40000136,
	0x40000137,
	0x4000014A,
	0x4000014B,
	0x4000014E,
	0x4000014F,
	0x40000150,
	0x40000154,
	0x40000155,
	0x40000157,
	0x40000158,
	0x4000015E,
	0x4000015F,
	0x4000016D,
	0x4000016E,
	0x4000016F,
	0x40000170,
	0x40000171,
	0x40000172,
	0x40000173,
	0x40000174,
	0x40000175,
	0x40000176,
	0x40000177,
	0x40000178,
	0x4000017C,
	0x40000181,
	0x40000186,
	0x40000190,
	0x40000191,
	0x40000192,
	0x40000193,
	0x40000194,
	0x40000195,
	0x40000196,
	0x40000197,
	0x40000198,
	0x40000199,
	0x400001B8,
	0x400001C4,
	0x400001C6,
	0x400001C7,
	0x400001C8,
	0x400001C9,
	0x400001CA,
	0x400001CB,
	0x400001CC,
	0x400001CD,
	0x400001CE,
	0x400001CF,
	0x400001EA,
	0x400001F4,
	0x400001F5,
	0x400001F6,
	0x400001F7,
	0x400001F8,
	0x400001F9,
	0x400001FA,
	0x400001FB,
	0x400001FC,
	0x400001FD,
	0x400001FE,
	0x40000208,
	0x40000209,
	0x4000020A,
	0x4000020B,
	0x4000020C,
	0x400002BC,
	0x400002BD,
	0x400002BE,
	0x400002C8,
	0x400002CA,
	0x400002CB,
	0x400002CD,
	0x400002CE,
	0x400002CF,
	0x400002D0,
	0x400002D1,
	0x400002D2,
	0x400002D4,
	0x400002D5,
	0x400002D6,
	0x400002D7,
	0x400002D8,
	0x400002D9,
	0x400002DB,
	0x400002DC,
	0x400002DD,
	0x400002E3,
	0x400002E6,
	0x400002E7,
	0x400003E8,
	0x400003E9,
	0x400003EA,
	0x400003EB,
	0x400003F2,
	0x400003FC,
	0x40000406,
	0x4000041A,
	0x40000424,
	0x4000042E,
	0x40000438,
	0x40000442,
	0x4000044C,
	0x40000456,
	0x40000460,
	0x4000046A,
	0x40000474,
	0x400004E2,
	0x400007D0,
	0x400007D1,
	0x400007D2,
	0x400007D5,
	0x400007D7,
	0x400007D8,
	0x400007D9,
	0x400007DA,
	0x400007DB,
	0x400007DC,
	0x400007DD,
	0x400007DE,
	0x400007DF,
	0x40000834,
	0x40000836,
	0x4000083B,
	0x4000083C,
	0x4000083D,
	0x4000083E,
	0x40000845,
	0x40000846,
	0x40000847,
	0x40000848,
	0x40000849,
	0x4000084B,
	0x4000084C,
	0x4000084D,
	0x4000084E,
	0x4000084F,
	0x40000850,
	0x40000851,
	0x40000852,
	0x40000853,
	0x40000854,
	0x40000855,
	0x40000856,
	0x40000859,
	0x4000085A,
	0x4000085B,
	0x4000085C,
	0x4000085D,
	0x4000085E,
	0x4000085F,
	0x40000860,
	0x40000861,
	0x40000862,
	0x40000863,
	0x40000864,
	0x40000865,
	0x40000867,
	0x40000868,
	0x40000870,
	0x40000872,
	0x40000873,
	0x40000874,
	0x4000087A,
	0x4000087D,
	0x4000087E,
	0x4000087F,
	0x40000880,
	0x40000881,
	0x40000882,
	0x40000898,
	0x40000899,
	0x40000BBC,
	0x40000BBD,
	0x40000BBE,
	0x40000BBF,
	0x40000BC0,
	0x40000BC1,
	0x40000BC2,
	0x40000BC3,
	0x40000BC4,
	0x40000BC5,
	0x40000BCA,
	0x40000BCB,
	0x40000BCC,
	0x40000BCD,
	0x40000BCE,
	0x40000BCF,
	0x40000BD0,
	0x40000BD1,
	0x40000BD2,
	0x40000BD3,
	0x40000BD4,
	0x40000BD5,
	0x40000BD6,
	0x40000BD7,
	0x40000BD8,
	0x40000BD9,
	0x40000BDA,
	0x40000BDB,
	0x40000BDC,
	0x40000BDD,
	0x40000BDE,
	0x40000BDF,
	0x40000BE0,
	0x40000BE1,
	0x40000BE2,
	0x40000BE3,
	0x40000BE4,
	0x40000BE5,
	0x40000BE6,
	0x40000BE7,
	0x40000FA0,
	0x40000FA1,
	0x40000FA2,
	0x40000FA3,
	0x40000FA4,
	0x40000FA5,
	0x40000FA6,
	0x40000FA7,
	0x40000FA8,
	0x40000FA9,
	0x40000FAA,
	0x40000FAB,
	0x40000FAC,
	0x40000FAD,
	0x40000FAE,
	0x40000FAF,
	0x40000FB0,
	0x40000FB1,
	0x40000FB2,
	0x40000FB3,
	0x40000FB4,
	0x40001004,
	0x40001005,
	0x40001068,
	0x40001069,
	0x4000106A,
	0x4000106B,
	0x4000106C,
	0x4000106D,
	0x4000106E,
	0x400014B4
};

extern DWORD pAmmunition[33] = {
	0x00061A80,
	0x00061AE4,
	0x00061B48,
	0x00061BAC,
	0x00061C10,
	0x00061C74,
	0x00061CD8,
	0x00061D3C,
	0x00061DA0,
	0x00061E04,
	0x00061E68,
	0x00061ECC,
	0x00062250,
	0x00062318,
	0x0006237C,
	0x00062444,
	0x000624A8,
	0x0006250C,
	0x00062570,
	0x000625D4,
	0x00062A20,
	0x00062A84,
	0x00062AE8,
	0x00062B4C,
	0x00062BB0,
	0x00062C14,
	0x00062C78,
	0x00062CDC,
	0x00062D40,
	0x00062DA4,
	0x00062E08,
	0x00062ED0,
	0x00062F34
};

extern DWORD pKeyGoods[66] = {
	0x4000087E,
	0x4000087F,
	0x40000880,
	0x40000881,
	0x40000882,
	0x4000087D,
	0x40000860,
	0x40000861,
	0x40000862,
	0x40000863,
	0x40000864,
	0x40000865,
	0x40000867,
	0x40000868,
	0x4000085B,
	0x4000085C,
	0x4000085A,
	0x40000859,
	0x4000084F,
	0x40000850,
	0x40000851,
	0x40000852,
	0x40000853,
	0x40000854,
	0x40000855,
	0x40000856,
	0x4000084B,
	0x4000084C,
	0x4000084D,
	0x4000084E,
	0x40000847,
	0x40000848,
	0x40000849,
	0x40000845,
	0x40000846,
	0x4000083B,
	0x4000083C,
	0x4000083D,
	0x4000083E,
	0x40000836,
	0x400007D0,
	0x400007D1,
	0x400007D2,
	0x400007D5,
	0x400007D7,
	0x400007D8,
	0x400007D9,
	0x400007DA,
	0x400007DB,
	0x400007DC,
	0x400007DD,
	0x400007DE,
	0x400007DF,
	0x40000834,
	0x400001EA,
	0x40000073,
	0x40000075,
	0x40000077,
	0x40000064,
	0x40000065,
	0x40000066,
	0x40000067,
	0x4000006C,
	0x4000015F,
	0x40000173,
	0x40000186
};

extern DWORD pLimitedGoods[204] = {
	0x40000064,
	0x40000065,
	0x40000066,
	0x40000067,
	0x4000006C,
	0x40000073,
	0x40000075,
	0x40000077,
	0x40000096,
	0x40000097,
	0x40000098,
	0x40000099,
	0x4000009A,
	0x4000009B,
	0x4000009C,
	0x4000009D,
	0x4000009E,
	0x4000009F,
	0x400000A0,
	0x400000A1,
	0x400000A2,
	0x400000A3,
	0x400000A4,
	0x400000A5,
	0x400000A6,
	0x400000A7,
	0x400000A8,
	0x400000A9,
	0x400000AA,
	0x400000AB,
	0x400000BE,
	0x400000BF,
	0x400000C0,
	0x400000C1,
	0x400000C2,
	0x400000C3,
	0x400000C4,
	0x400000C5,
	0x400000C6,
	0x400000C7,
	0x400000C8,
	0x400000C9,
	0x400000CA,
	0x400000CB,
	0x400000CC,
	0x400000CD,
	0x400000CE,
	0x400000CF,
	0x400000D0,
	0x400000D1,
	0x400000D2,
	0x400000D3,
	0x4000015F,
	0x40000173,
	0x40000186,
	0x400001B8,
	0x400001EA,
	0x400001F4,
	0x400001F5,
	0x400001F6,
	0x400001F7,
	0x400001F8,
	0x400001F9,
	0x400001FA,
	0x400001FB,
	0x400001FC,
	0x400001FD,
	0x400001FE,
	0x40000208,
	0x40000209,
	0x4000020A,
	0x4000020B,
	0x4000020C,
	0x400002BC,
	0x400002BD,
	0x400002BE,
	0x400002C8,
	0x400002CA,
	0x400002CB,
	0x400002CD,
	0x400002CE,
	0x400002CF,
	0x400002D0,
	0x400002D1,
	0x400002D2,
	0x400002D4,
	0x400002D5,
	0x400002D6,
	0x400002D7,
	0x400002D8,
	0x400002D9,
	0x400002DB,
	0x400002DC,
	0x400002DD,
	0x400002E3,
	0x400002E6,
	0x400002E7,
	0x400003EB,
	0x4000044C,
	0x40000456,
	0x40000460,
	0x4000046A,
	0x40000474,
	0x4000041A,
	0x400007D0,
	0x400007D1,
	0x400007D2,
	0x400007D5,
	0x400007D7,
	0x400007D8,
	0x400007D9,
	0x400007DA,
	0x400007DB,
	0x400007DC,
	0x400007DD,
	0x400007DE,
	0x400007DF,
	0x40000834,
	0x40000836,
	0x4000083B,
	0x4000083C,
	0x4000083D,
	0x4000083E,
	0x40000845,
	0x40000846,
	0x40000847,
	0x40000848,
	0x40000849,
	0x4000084B,
	0x4000084C,
	0x4000084D,
	0x4000084E,
	0x4000084F,
	0x40000850,
	0x40000851,
	0x40000852,
	0x40000853,
	0x40000854,
	0x40000855,
	0x40000856,
	0x40000859,
	0x4000085A,
	0x4000085B,
	0x4000085C,
	0x4000085D,
	0x4000085E,
	0x4000085F,
	0x40000860,
	0x40000861,
	0x40000862,
	0x40000863,
	0x40000864,
	0x40000865,
	0x40000867,
	0x40000868,
	0x4000087A,
	0x4000087D,
	0x4000087E,
	0x4000087F,
	0x40000880,
	0x40000881,
	0x40000882,
	0x40000BBE,
	0x40000BBF,
	0x40000BC0,
	0x40000BC1,
	0x40000BC2,
	0x40000BC3,
	0x40000BC4,
	0x40000BC5,
	0x40000BD1,
	0x40000BD2,
	0x40000BD3,
	0x40000BD4,
	0x40000BD5,
	0x40000BD6,
	0x40000BD7,
	0x40000BD8,
	0x40000BD9,
	0x40000BDA,
	0x40000BDB,
	0x40000BDC,
	0x40000BDD,
	0x40000BDE,
	0x40000BDF,
	0x40000BE0,
	0x40000BE1,
	0x40000BE2,
	0x40000BE3,
	0x40000BE4,
	0x40000BE5,
	0x40000BE6,
	0x40000BE7,
	0x40000FB4,
	0x40001004,
	0x40001005,
	0x40001068,
	0x40001069,
	0x4000106A,
	0x4000106B,
	0x4000106C,
	0x4000106D,
	0x4000106E,
	0x400014B4
};

extern DWORD pNGRings[134] = {
	0x200077ED,
	0x200077E3,
	0x200077D9,
	0x200077CF,
	0x200077C5,
	0x200076E0,
	0x200076DF,
	0x200076D5,
	0x200076CB,
	0x200076C1,
	0x200076B7,
	0x20007603,
	0x20007595,
	0x20007581,
	0x20007563,
	0x2000515F,
	0x200050F1,
	0x20005083,
	0x20005029,
	0x2000501F,
	0x20005015,
	0x2000500B,
	0x20005001,
	0x20004FF7,
	0x20004FED,
	0x20004FB1,
	0x20004FA7,
	0x20004F93,
	0x20004F4D,
	0x20004F39,
	0x20004F2F,
	0x20004EDF,
	0x20004EC1,
	0x20004EB7,
	0x20004EAD,
	0x20004E7B,
	0x20004E71,
	0x20004E67,
	0x20004E5D,
	0x20004E49,
	0x20004E53,
	0x20004E3F,
	0x20004E35,
	0x20004E2B,
	0x20004E21,
	0x20004E22,
	0x20004E2C,
	0x20004E36,
	0x20004E40,
	0x20004E4A,
	0x20004E54,
	0x20004E5E,
	0x20004E68,
	0x20004E72,
	0x20004E7C,
	0x20004EAE,
	0x20004EB8,
	0x20004EC2,
	0x20004EE0,
	0x20004F30,
	0x20004F3A,
	0x20004F4E,
	0x20004FA8,
	0x20004FB2,
	0x20004FD0,
	0x20004FEE,
	0x20004FF8,
	0x20005002,
	0x2000500C,
	0x20005016,
	0x20005020,
	0x2000502A,
	0x20005084,
	0x200050F2,
	0x20005160,
	0x20007564,
	0x20007582,
	0x20007596,
	0x20007604,
	0x200076B8,
	0x200076C2,
	0x200076CC,
	0x200076D6,
	0x200077C6,
	0x200077D0,
	0x200077DA,
	0x200077E4,
	0x200077EE,
	0x20004F94,
	0x200077EF,
	0x200077E5,
	0x200077DB,
	0x200077D1,
	0x200077C7,
	0x200076E1,
	0x200076D7,
	0x200076CD,
	0x200076C3,
	0x200076B9,
	0x20007605,
	0x20007597,
	0x20007583,
	0x20007565,
	0x20005161,
	0x200050F3,
	0x20005085,
	0x2000502B,
	0x20005021,
	0x20005017,
	0x2000500D,
	0x20005003,
	0x20004FF9,
	0x20004FEF,
	0x20004FB3,
	0x20004FA9,
	0x20004F4F,
	0x20004F31,
	0x20004EE1,
	0x20004EC3,
	0x20004EB9,
	0x20004EAF,
	0x20004E7D,
	0x20004E73,
	0x20004E69,
	0x20004E5F,
	0x20004E55,
	0x20004E4B,
	0x20004E41,
	0x20004E37,
	0x20004E2D,
	0x20004E23,
	0x20004F3B,
	0x20004FD1,
	0x20004F95
};

extern DWORD pUninfusableWeapons[64] = {
	0x00C72090,
	0x00C747A0,
	0x00C76EB0,
	0x00C795C0,
	0x00C8F550,
	0x00C99190,
	0x00C9B8A0,
	0x00CA7BF0,
	0x00CACA10,
	0x00D02140,
	0x00D04850,
	0x00D5C690,
	0x00D5EDA0,
	0x00D63BC0,
	0x00D689E0,
	0x00D74D30,
	0x00D83790,
	0x01DADA80,
	0x00C7E3E0,
	0x00C80AF0,
	0x00C83200,
	0x00C88020,
	0x00C8CE40,
	0x00C91C60,
	0x00C94370,
	0x00C96A80,
	0x00C9DFB0,
	0x00CA06C0,
	0x00CA2DD0,
	0x00CA54E0,
	0x00CAA300,
	0x00CAF120,
	0x00CC77C0,
	0x00CD3B10,
	0x00CD6220,
	0x00CDFE60,
	0x00CE2570,
	0x00CE4C80,
	0x00CE7390,
	0x00CE9AA0,
	0x00CEC1B0,
	0x00CEE8C0,
	0x00CF0FD0,
	0x00CF36E0,
	0x00CF5DF0,
	0x00CF8500,
	0x00CFAC10,
	0x00CFD320,
	0x00CFFA30,
	0x00D614B0,
	0x00D662D0,
	0x00D6B0F0,
	0x00D6FF10,
	0x00D72620,
	0x00D79B50,
	0x00D7C260,
	0x00D7E970,
	0x00D8ACC0,
	0x00D8D3D0,
	0x009B55A0,
	0x00CC9ED0,
	0x00CCC5E0,
	0x00D885B0,
	0x00D77440
};

extern DWORD pShields[81] = {
	0x01312D00,
	0x01315410,
	0x0131A230,
	0x0131C940,
	0x01323E70,
	0x01326580,
	0x0132DAB0,
	0x013301C0,
	0x013328D0,
	0x01339E00,
	0x0133C510,
	0x0133EC20,
	0x01341330,
	0x01343A40,
	0x01346150,
	0x01348860,
	0x0134AF70,
	0x0134D680,
	0x0134FD90,
	0x013524A0,
	0x01354BB0,
	0x01409650,
	0x01410B80,
	0x014180B0,
	0x01426B10,
	0x01429220,
	0x0142B930,
	0x0142E040,
	0x01435570,
	0x0143A390,
	0x0143F1B0,
	0x014418C0,
	0x01443FD0,
	0x01448DF0,
	0x0144DC10,
	0x014FD890,
	0x014FFFA0,
	0x0150EA00,
	0x01513820,
	0x0151AD50,
	0x0151D460,
	0x01522280,
	0x01544560,
	0x01546C70,
	0x013376F0,
	0x013572C0,
	0x013599D0,
	0x014159A0,
	0x0141F5E0,
	0x01421CF0,
	0x01424400,
	0x01430750,
	0x01432E60,
	0x01437C80,
	0x0143CAA0,
	0x014466E0,
	0x0144B500,
	0x01504DC0,
	0x015074D0,
	0x01509BE0,
	0x0150C2F0,
	0x01511110,
	0x01515F30,
	0x01518640,
	0x0151FB70,
	0x01524990,
	0x015270A0,
	0x015297B0,
	0x0152BEC0,
	0x0152E5D0,
	0x01530CE0,
	0x015333F0,
	0x01535B00,
	0x01538210,
	0x0153A920,
	0x0153D030,
	0x0153F740,
	0x01541E50,
	0x0135C0E0,
	0x01450320,
	0x01452A30
};

extern DWORD pNormalWeapons[185] = {
	0x000F4240,
	0x000F6950,
	0x000F9060,
	0x000FDE80,
	0x00102CA0,
	0x0010A1D0,
	0x001E8480,
	0x001EAB90,
	0x001ED2A0,
	0x001EF9B0,
	0x001F6EE0,
	0x00205940,
	0x002191C0,
	0x0021B8D0,
	0x0021DFE0,
	0x002DC6C0,
	0x002DEDD0,
	0x002E14E0,
	0x003D3010,
	0x003D7E30,
	0x003DA540,
	0x003DCC50,
	0x003DF360,
	0x003E1A70,
	0x003EB6B0,
	0x004C4B40,
	0x004C7250,
	0x005B8D80,
	0x005BDBA0,
	0x005C29C0,
	0x005C50D0,
	0x005C9EF0,
	0x005CC600,
	0x005D1420,
	0x005DB060,
	0x005DD770,
	0x005E73B0,
	0x006ACFC0,
	0x006AF6D0,
	0x006B1DE0,
	0x006B9310,
	0x006C2F50,
	0x006C5660,
	0x006D19B0,
	0x007A1200,
	0x007A3910,
	0x007A6020,
	0x007A8730,
	0x007AFC60,
	0x007B4A80,
	0x007BBFB0,
	0x007C8300,
	0x007DBB80,
	0x007DE290,
	0x007EA5E0,
	0x00895440,
	0x00897B50,
	0x0089C970,
	0x008A8CC0,
	0x008AB3D0,
	0x008ADAE0,
	0x008B2900,
	0x008C6180,
	0x00989680,
	0x0098BD90,
	0x0098E4A0,
	0x00990BB0,
	0x0099CF00,
	0x0099F610,
	0x009AB960,
	0x00A7D8C0,
	0x00A7FFD0,
	0x00A8EA30,
	0x00B71B00,
	0x00B7DE50,
	0x00B80560,
	0x00B8C8B0,
	0x00B8EFC0,
	0x00C72090,
	0x00C747A0,
	0x00C76EB0,
	0x00C795C0,
	0x00C8F550,
	0x00C99190,
	0x00C9B8A0,
	0x00CA7BF0,
	0x00CACA10,
	0x00D02140,
	0x00D04850,
	0x00D5C690,
	0x00D5EDA0,
	0x00D63BC0,
	0x00D689E0,
	0x00D74D30,
	0x00D83790,
	0x00F42400,
	0x00F47220,
	0x00F49930,
	0x00F4E750,
	0x00F50E60,
	0x00F53570,
	0x00F58390,
	0x00F5AAA0,
	0x00F61FD0,
	0x01312D00,
	0x01315410,
	0x0131A230,
	0x0131C940,
	0x01323E70,
	0x01326580,
	0x0132DAB0,
	0x013301C0,
	0x013328D0,
	0x01339E00,
	0x0133C510,
	0x0133EC20,
	0x01341330,
	0x01343A40,
	0x01346150,
	0x01348860,
	0x0134AF70,
	0x0134D680,
	0x0134FD90,
	0x013524A0,
	0x01354BB0,
	0x01409650,
	0x01410B80,
	0x014180B0,
	0x01426B10,
	0x01429220,
	0x0142B930,
	0x0142E040,
	0x01435570,
	0x0143A390,
	0x0143F1B0,
	0x014418C0,
	0x01443FD0,
	0x01448DF0,
	0x0144DC10,
	0x014FD890,
	0x014FFFA0,
	0x0150EA00,
	0x01513820,
	0x0151AD50,
	0x0151D460,
	0x01522280,
	0x01544560,
	0x01546C70,
	0x015EF3C0,
	0x015F1AD0,
	0x01CAFC00,
	0x01CD6D00,
	0x01CD9410,
	0x01CDE230,
	0x01CEF3A0,
	0x01CF1AB0,
	0x01CF68D0,
	0x01CF8FE0,
	0x01D00510,
	0x01D05330,
	0x01D0C860,
	0x01D13D90,
	0x01D3D5A0,
	0x01D66DB0,
	0x01D709F0,
	0x01D77F20,
	0x01D8DEB0,
	0x01DA3E40,
	0x01DADA80,
	0x01DBEBF0,
	0x01DC1300,
	0x01DC3A10,
	0x01DC6120,
	0x01DC8830,
	0x01DCAF40,
	0x01DCD650,
	0x01DCFD60,
	0x01DD2470,
	0x01DD4B80,
	0x01DD7290,
	0x006D67D0,
	0x008CD6B0,
	0x015F1AD0,
	0x008D24D0,
	0x00F5F8C0
};

extern DWORD pUniqueWeapons[282] = {
	0x000FB770,
	0x001053B0,
	0x00107AC0,
	0x00111700,
	0x00203230,
	0x0020A760,
	0x0020CE70,
	0x0020F580,
	0x002143A0,
	0x002206F0,
	0x0022A330,
	0x002E3BF0,
	0x002E6300,
	0x002E8A10,
	0x002EB120,
	0x003E4180,
	0x003E6890,
	0x003E8FA0,
	0x004C9960,
	0x004CC070,
	0x004CE780,
	0x004D0E90,
	0x005BB490,
	0x005C77E0,
	0x005D8950,
	0x005E2590,
	0x005E4CA0,
	0x005E9AC0,
	0x005F0FF0,
	0x005F3700,
	0x005F5E10,
	0x005F8520,
	0x005FAC30,
	0x005FD340,
	0x005FFA50,
	0x00602160,
	0x00604870,
	0x00606F80,
	0x00609690,
	0x0060BDA0,
	0x0060E4B0,
	0x00610BC0,
	0x006132D0,
	0x006B6C00,
	0x006BE130,
	0x006C0840,
	0x006C7D70,
	0x006CA480,
	0x006CCB90,
	0x007CAA10,
	0x007CD120,
	0x007CF830,
	0x007D4650,
	0x007D6D60,
	0x007D9470,
	0x007E09A0,
	0x007E30B0,
	0x007E57C0,
	0x007E7ED0,
	0x008B01F0,
	0x008B5010,
	0x008B7720,
	0x008BC540,
	0x008BEC50,
	0x008C1360,
	0x008C3A70,
	0x008CAFA0,
	0x009959D0,
	0x0099A7F0,
	0x009A1D20,
	0x009A4430,
	0x009A6B40,
	0x009AE070,
	0x009B0780,
	0x00A826E0,
	0x00A84DF0,
	0x00A87500,
	0x00B7B740,
	0x00B916D0,
	0x00B93DE0,
	0x00B964F0,
	0x00B98C00,
	0x00B9B310,
	0x00B9DA20,
	0x00BA0130,
	0x00C7E3E0,
	0x00C80AF0,
	0x00C83200,
	0x00C88020,
	0x00C8CE40,
	0x00C91C60,
	0x00C94370,
	0x00C96A80,
	0x00C9DFB0,
	0x00CA06C0,
	0x00CA2DD0,
	0x00CA54E0,
	0x00CAA300,
	0x00CAF120,
	0x00CC77C0,
	0x00CD3B10,
	0x00CD6220,
	0x00CDFE60,
	0x00CE2570,
	0x00CE4C80,
	0x00CE7390,
	0x00CE9AA0,
	0x00CEC1B0,
	0x00CEE8C0,
	0x00CF0FD0,
	0x00CF36E0,
	0x00CF5DF0,
	0x00CF8500,
	0x00CFAC10,
	0x00CFD320,
	0x00CFFA30,
	0x00D614B0,
	0x00D662D0,
	0x00D6B0F0,
	0x00D6FF10,
	0x00D72620,
	0x00D79B50,
	0x00D7C260,
	0x00D7E970,
	0x00D8ACC0,
	0x00D8D3D0,
	0x00F4C040,
	0x00F55C80,
	0x013376F0,
	0x013572C0,
	0x013599D0,
	0x014159A0,
	0x0141F5E0,
	0x01421CF0,
	0x01424400,
	0x01430750,
	0x01432E60,
	0x01437C80,
	0x0143CAA0,
	0x014466E0,
	0x0144B500,
	0x01504DC0,
	0x015074D0,
	0x01509BE0,
	0x0150C2F0,
	0x01511110,
	0x01515F30,
	0x01518640,
	0x0151FB70,
	0x01524990,
	0x015270A0,
	0x015297B0,
	0x0152BEC0,
	0x0152E5D0,
	0x01530CE0,
	0x015333F0,
	0x01535B00,
	0x01538210,
	0x0153A920,
	0x0153D030,
	0x0153F740,
	0x01541E50,
	0x01C9EA90,
	0x01CA11A0,
	0x01CA38B0,
	0x01CA5FC0,
	0x01CA86D0,
	0x01CAADE0,
	0x01CAD4F0,
	0x01CB2310,
	0x01CB4A20,
	0x01CB7130,
	0x01CBBF50,
	0x01CBE660,
	0x01CC5B90,
	0x01CC82A0,
	0x01CCD0C0,
	0x01CD1EE0,
	0x01CDBB20,
	0x01CE5760,
	0x01CE7E70,
	0x01CEA580,
	0x01CECC90,
	0x01CF41C0,
	0x01CFB6F0,
	0x01CFDE00,
	0x01D02C20,
	0x01D07A40,
	0x01D0A150,
	0x01D0EF70,
	0x01D164A0,
	0x01D18BB0,
	0x01D1B2C0,
	0x01D200E0,
	0x01D227F0,
	0x01D24F00,
	0x01D27610,
	0x01D29D20,
	0x01D2C430,
	0x01D31250,
	0x01D33960,
	0x01D36070,
	0x01D38780,
	0x01D3AE90,
	0x01D3FCB0,
	0x01D423C0,
	0x01D44AD0,
	0x01D471E0,
	0x01D498F0,
	0x01D4C000,
	0x01D50E20,
	0x01D55C40,
	0x01D58350,
	0x01D5AA60,
	0x01D5D170,
	0x01D5F880,
	0x01D646A0,
	0x01D694C0,
	0x01D6BBD0,
	0x01D6E2E0,
	0x01D73100,
	0x01D75810,
	0x01D7F450,
	0x01D84270,
	0x01D86980,
	0x01D89090,
	0x01D8B7A0,
	0x01D92CD0,
	0x01D953E0,
	0x01D97AF0,
	0x01D9A200,
	0x01D9C910,
	0x01D9F020,
	0x01DA1730,
	0x01DA6550,
	0x01DA8C60,
	0x01DAB370,
	0x01DB0190,
	0x01DB28A0,
	0x01DB4FB0,
	0x01DB76C0,
	0x01DB9DD0,
	0x01DBC4E0,
	0x01DD99A0,
	0x01DDC0B0,
	0x01DDE7C0,
	0x01DE0ED0,
	0x01DE35E0,
	0x01DE5CF0,
	0x01DE8400,
	0x01DEAB10,
	0x01DED220,
	0x01DEF930,
	0x01DF2040,
	0x009B55A0,
	0x00F646E0,
	0x00222E00,
	0x00F66DF0,
	0x006D8EE0,
	0x007ECCF0,
	0x00A89C10,
	0x00D85EA0,
	0x00CC9ED0,
	0x00B82C70,
	0x003EDDC0,
	0x0135C0E0,
	0x01450320,
	0x009B2E90,
	0x00118C30,
	0x00CCC5E0,
	0x00116520,
	0x006159E0,
	0x003F04D0,
	0x00225510,
	0x00F69500,
	0x004D35A0,
	0x00227C20,
	0x00D885B0,
	0x01452A30,
	0x007EF400,
	0x008D4BE0,
	0x00D77440
};


